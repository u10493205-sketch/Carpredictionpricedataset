import pandas as pd
import numpy as np
import joblib
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Define paths
BASE_DIR = r"C:\Users\E105484\OneDrive - Road Accident Fund\Documents\Regynisis\StreamlitApp"
DATA_FILE = os.path.join(BASE_DIR, "car_price_dataset.csv")
MODEL_PATH = os.path.join(BASE_DIR, "best_model.pkl")
SCALER_PATH = os.path.join(BASE_DIR, "scaler.pkl")
ENCODER_PATH = os.path.join(BASE_DIR, "one_hot_encoder.pkl")
FEATURE_NAMES_PATH = os.path.join(BASE_DIR, "feature_names.pkl")

# Load data
df = pd.read_csv(DATA_FILE)

# Define columns
numerical_features = ['vehicle_age', 'km_driven', 'mileage', 'engine', 'max_power', 'seats']
categorical_features = ['seller_type', 'fuel_type', 'transmission_type']

# Preprocess data
X = df.drop('selling_price', axis=1)
y = df['selling_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')

X_train_num = scaler.fit_transform(X_train[numerical_features])
X_test_num = scaler.transform(X_test[numerical_features])

X_train_cat = encoder.fit_transform(X_train[categorical_features])
X_test_cat = encoder.transform(X_test[categorical_features])

X_train_processed = np.concatenate([X_train_num, X_train_cat], axis=1)
X_test_processed = np.concatenate([X_test_num, X_test_cat], axis=1)

# Train model
model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42)

try:
    model.fit(X_train_processed, y_train)
except KeyboardInterrupt:
    print("Training interrupted. Exiting...")
except Exception as e:
    print(f"An error occurred: {e}")

# Evaluate model
y_pred = model.predict(X_test_processed)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"MSE: {mse:.2f}, R2: {r2:.2f}")

# Save model and preprocessing objects
joblib.dump(model, MODEL_PATH)
joblib.dump(scaler, SCALER_PATH)
joblib.dump(encoder, ENCODER_PATH)

# Get feature names
encoded_feature_names = encoder.get_feature_names_out(categorical_features)
feature_names = numerical_features + list(encoded_feature_names)
joblib.dump(feature_names, FEATURE_NAMES_PATH)

print("âœ… Model and preprocessing files saved successfully!")
